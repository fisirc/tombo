// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MultimediaComment {
  id        String   @id @default(uuid())
  resource  String
  type      String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String   @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("multimedia_comments")
}

model Comment {
  id                 String              @id @default(uuid())
  message            String
  report             Report              @relation(fields: [reportId], references: [id])
  reportId           String              @map("report_id")
  user               User                @relation(fields: [userId], references: [id])
  userId             String              @map("user_id")
  multimediaComments MultimediaComment[]
  createdAt          DateTime            @default(now()) @map("created_at")

  @@map("comments")
}

model Report {
  id                String             @id @default(uuid())
  latitude          Float
  longitude         Float
  address           String             @default("No address")
  description       String
  user              User               @relation(fields: [userId], references: [id])
  userId            String             @map("user_id")
  reportType        String             @map("report_type")
  comments          Comment[]
  multimediaReports MultimediaReport[]
  createdAt         DateTime           @default(now()) @map("created_at")

  @@map("reports")
}

model MultimediaReport {
  id        String   @id @default(uuid())
  resource  String
  type      String
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId  String   @map("report_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("multimedia_reports")
}

model PointType {
  id          String  @id @default(uuid())
  name        String
  description String
  points      Point[]

  @@map("point_types")
}

model Point {
  id              String    @id @default(uuid())
  name            String
  latitude        Float
  longitude       Float
  physicalAddress String    @map("physical_address")
  pointType       PointType @relation(fields: [pointTypeId], references: [id])
  pointTypeId     String    @map("point_type_id")

  @@map("points")
}

model User {
  id             String           @id @unique @default(uuid())
  googleId       String           @unique
  email          String           @unique
  name           String
  avatar         String
  phone          String
  preferences    Preferences?     @relation(fields: [preferencesId], references: [id])
  preferencesId  String?          @unique @map("preferences_id")
  reports        Report[]
  comments       Comment[]
  DeviceIdentity DeviceIdentity[]

  @@map("users")
}

model Preferences {
  id                  String  @id @default(uuid())
  activeNotifications Boolean @map("active_notifications")
  alertRadiusKm       Float   @map("alert_radius_km")
  interfaceTheme      String  @map("interface_theme")
  language            String
  user                User?

  @@map("preferences")
}

model DeviceIdentity {
  id        Int      @id @default(autoincrement())
  deviceId  String   @unique @map("device_id")
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("device_identities")
}
